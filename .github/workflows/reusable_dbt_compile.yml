name: "DBT build job"

on:
  workflow_call:
    inputs:
      TARGET_COMPOSER_BUCKET:
        type: string
        required: true
      TARGET_ENV:
        type: string
        required: true
      NOTIF_CHANNEL_ID:
        type: string
        required: false # Si pas fourni, alors pas de notif
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true
          
jobs:
  dbt-compile:
    name: "dbt-compile"
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    defaults:
     run: 
       working-directory: "./orchestration/"
    env:
      AIRFLOW_HOME: "./"
      DAG_FOLDER: "./dags/"
      DBT_FOLDER: "./dags/data_gcp_dbt/"
    steps:
      - uses: actions/checkout@v4
      - name: "Connect to Secret Manager"
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get secrets for Slack"
        id: 'secrets'
        uses: 'google-github-actions/get-secretmanager-secrets@v2'
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          cache: 'pip' # caching pip dependencies
          cache-dependency-path: ./orchestration/airflow/orchestration-requirements.txt
      - name: Check pip version
        run: pip --version
      - name: "Install Python requirements"
        run: pip install -r airflow/orchestration-requirements.txt
      - name: "pip freeze"
        run: pip freeze
      - name: "Authenticate with Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: true
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
      - name: "Pull run artifacts"
        working-directory: "./orchestration/dags/data_gcp_dbt/"
        env:
          COMPOSER_DAGS_BUCKET: ${{ inputs.TARGET_COMPOSER_BUCKET }}
        run: |
          mkdir env-run-artifacts
          gsutil -m cp gs://$COMPOSER_DAGS_BUCKET/data/target/* env-run-artifacts/
      - name: "Install dbt dependencies"
        working-directory: "./orchestration/dags/data_gcp_dbt/"
        env:
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
        run: |
          export PYTHONPATH=$PYTHONPATH:./dags
          dbt deps 
      - name: "compile dbt project"
        working-directory: "./orchestration/dags/data_gcp_dbt/"
        env:
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
          TARGET_ENV: ${{ inputs.TARGET_ENV }}
        run: dbt compile --profile CI --target $TARGET_ENV --vars "{'ENV_SHORT_NAME':'$TARGET_ENV'}" 
      - name: "Run modified models & 1st order childrens"
        working-directory: "./orchestration/dags/data_gcp_dbt/"
        env:
          TARGET_BRANCH: ${{ github.base_ref }}
          TARGET_ENV: ${{ inputs.TARGET_ENV }}
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
        run: |
          dbt_run_changed_models() {
          children=$1
          models=$(git diff origin/$TARGET_BRANCH HEAD --name-only | grep 'orchestration/dags/data_gcp_dbt/models/' | grep '\.sql$' | awk -F '/' '{ print $NF }' | sed "s/\.sql$/${children}/g" | tr '\n' ' ')
          echo ${#models}
          if [ -z "$models" ]
          then
                echo "no models were modified"
          else
                echo "Running models: ${models}"
                dbt run --model $models --exclude config.materialized:incremental --profile CI --target $TARGET_ENV --defer --state env-run-artifacts --favor-state --vars "{'CI_MATERIALIZATION':'view','ENV_SHORT_NAME':'$TARGET_ENV'}" 
          fi          
          }
          dbt_run_changed_models +1
        
      - name: "Run modified tests"
        working-directory: "./orchestration/dags/data_gcp_dbt/"
        env:
          TARGET_BRANCH: ${{ github.base_ref }}
          TARGET_ENV: ${{ inputs.TARGET_ENV }}
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."          
        run: dbt test --store-failures -s "state:modified" --exclude test_name:relationships config.materialized:incremental --profile CI --target $TARGET_ENV --defer --state env-run-artifacts --favor-state --vars "{'CI_MATERIALIZATION':'view','CI_SEVERITY':'error','ENV_SHORT_NAME':'$TARGET_ENV'}"
      - name: "Post to a Slack channel"
        if: ${{ inputs.NOTIF_CHANNEL_ID != '' && failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        env:
           SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.NOTIF_CHANNEL_ID }}
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#A30002",
                  "author_name": "${{github.actor}}",
                  "author_link": "https://github.com/${{github.actor}}",
                  "author_icon": "https://github.com/${{github.actor}}.png",
                  "title": "Compilation dbt",
                  "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "text": "La compilation dbt a échoué"
                }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
