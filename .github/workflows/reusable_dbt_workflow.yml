name: "DBT building job"

on:
  workflow_call:
    inputs:
      TARGET_AIRFLOW_BUCKET:
        type: string
        required: true
      ENV_SHORT_NAME:
        type: string
        required: true
      APPLICATIVE_EXTERNAL_CONNECTION_ID:
        type: string
        required: false
      NOTIF_CHANNEL_ID:
        type: string
        required: false # Si pas fourni, alors pas de notif
    secrets:
      GCP_EHP_WORKLOAD_IDENTITY_PROVIDER:
        required: true
      GCP_EHP_SERVICE_ACCOUNT:
        required: true

jobs:
  get-token:
    uses: ./.github/workflows/reusable_github_app_auth.yml
    with:
      permission-contents: write
    secrets:
      PASSCULTURE_GITHUB_ACTION_APP_ID: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_ID }}
      PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY: ${{ secrets.PASSCULTURE_GITHUB_ACTION_APP_PRIVATE_KEY }}

  dbt-build:
    needs: get-token
    name: "dbt-build"
    runs-on: ubuntu-latest
    environment: ${{ inputs.GITHUB_ENV_NAME }}
    permissions:
      id-token: write
      contents: write
    env:
      AIRFLOW_HOME: "./orchestration/airflow/"
      DAG_FOLDER: "./orchestration/dags/"
      DBT_FOLDER: "./orchestration/dags/data_gcp_dbt/"
      UV_PROJECT: ${{ github.workspace }}
    defaults:
      run:
        working-directory: "."
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: "Connect to Secret Manager"
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: ${{ secrets.GCP_EHP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_EHP_SERVICE_ACCOUNT }}
      - name: "Get secrets for Slack"
        id: "secrets"
        uses: "google-github-actions/get-secretmanager-secrets@v2"
        with:
          secrets: |-
            SLACK_BOT_TOKEN:passculture-metier-ehp/passculture-ci-slack-bot-token
            ARTIFACT_REGISTRY_SERVICE_ACCOUNT:passculture-metier-ehp/passculture-main-artifact-registry-service-account
            ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER:passculture-metier-ehp/infra-prod-gcp-workload-identity-provider
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - uses: yezz123/setup-uv@v4

      - name: Install Default Python requirements for root project
        run: uv sync

      - name: "Authenticate with Google Cloud"
        uses: "google-github-actions/auth@v2"
        with:
          create_credentials_file: true
          token_format: "access_token"
          workload_identity_provider: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ steps.secrets.outputs.ARTIFACT_REGISTRY_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v2"
      - name: "Pull run artifacts"
        working-directory: ${{ env.DBT_FOLDER }}
        env:
          TARGET_AIRFLOW_BUCKET: ${{ inputs.TARGET_AIRFLOW_BUCKET }}
        run: |
          mkdir env-run-artifacts
          gsutil cp gs://$TARGET_AIRFLOW_BUCKET/data/target/manifest.json env-run-artifacts/manifest.json
          gsutil cp gs://$TARGET_AIRFLOW_BUCKET/data/target/run_results.json env-run-artifacts/run_results.json
          echo $(ls env-run-artifacts)
      - name: "Install dbt dependencies"
        working-directory: ${{ env.DBT_FOLDER }}
        env:
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
        run: uv run dbt deps
      # - name: "Sqlfluff format"
      #   working-directory: "./orchestration/dags/data_gcp_dbt/"
      #   env:
      #     DBT_TARGET_PATH: "target/"
      #     DBT_PROFILES_DIR: "."
      #     ENV_SHORT_NAME: ${{ inputs.ENV_SHORT_NAME }}
      #     TARGET_BRANCH: ${{ github.base_ref }}
      #   run: ./scripts/sqlfluff_format.sh $TARGET_BRANCH
      # - name: "Sqlfluff lint"
      #   working-directory: "./orchestration/dags/data_gcp_dbt/"
      #   env:
      #     DBT_TARGET_PATH: "target/"
      #     DBT_PROFILES_DIR: "."
      #     ENV_SHORT_NAME: ${{ inputs.ENV_SHORT_NAME }}
      #     TARGET_BRANCH: ${{ github.base_ref }}
      #   run: ./scripts/sqlfluff_lint.sh $TARGET_BRANCH
      - name: "compile dbt project"
        working-directory: ${{ env.DBT_FOLDER }}
        env:
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
          ENV_SHORT_NAME: ${{ inputs.ENV_SHORT_NAME }}
          APPLICATIVE_EXTERNAL_CONNECTION_ID: ${{ inputs.APPLICATIVE_EXTERNAL_CONNECTION_ID }}
        run: uv run dbt compile --profile CI --target $ENV_SHORT_NAME --vars "{'ENV_SHORT_NAME':'$ENV_SHORT_NAME'}"
      - name: "Run modified models & 1st order childrens"
        working-directory: .
        env:
          TARGET_BRANCH: ${{ github.base_ref }}
          ENV_SHORT_NAME: ${{ inputs.ENV_SHORT_NAME }}
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
          APPLICATIVE_EXTERNAL_CONNECTION_ID: ${{ inputs.APPLICATIVE_EXTERNAL_CONNECTION_ID }}
        run: uv run .github/workflows/scripts/run_dbt_changed_models.sh ${{ github.base_ref }} orchestration/dags/data_gcp_dbt
      - name: "Run modified tests"
        working-directory: ${{ env.DBT_FOLDER }}
        env:
          TARGET_BRANCH: ${{ github.base_ref }}
          ENV_SHORT_NAME: ${{ inputs.ENV_SHORT_NAME }}
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
          CI_SEVERITY: "warn"
          APPLICATIVE_EXTERNAL_CONNECTION_ID: ${{ inputs.APPLICATIVE_EXTERNAL_CONNECTION_ID }}
        run: |
          uv run dbt test --store-failures -s "state:modified" \
          --exclude "test_name:relationships" "tag:elementary" "config.materialized:incremental" \
          --profile CI --target $ENV_SHORT_NAME --defer \
          --state env-run-artifacts --favor-state \
          --vars "{'CI_MATERIALIZATION':'view','ENV_SHORT_NAME':'$ENV_SHORT_NAME'}"

      - name: "generate dbt docs"
        working-directory: ${{ env.DBT_FOLDER }}
        env:
          DBT_TARGET_PATH: "target/"
          DBT_PROFILES_DIR: "."
          ENV_SHORT_NAME: ${{ inputs.ENV_SHORT_NAME }}
          APPLICATIVE_EXTERNAL_CONNECTION_ID: ${{ inputs.APPLICATIVE_EXTERNAL_CONNECTION_ID }}
        run: uv run dbt docs generate --profile CI --target $ENV_SHORT_NAME --vars "{'ENV_SHORT_NAME':'$ENV_SHORT_NAME'}"

      - name: Get changed files
        id: files_changes
        uses: tj-actions/changed-files@v45

      - name: "Check dbt docs"
        if: steps.files_changes.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.files_changes.outputs.all_changed_files }}
        run: |
          echo ${ALL_CHANGED_FILES}
          uv run pre-commit run --files ${ALL_CHANGED_FILES} --config .pre-commit-ci-dbt-config.yaml

      - name: "Post to a Slack channel"
        if: ${{ inputs.NOTIF_CHANNEL_ID != '' && failure() }}
        uses: slackapi/slack-github-action@v1.23.0
        env:
          SLACK_BOT_TOKEN: ${{ steps.secrets.outputs.SLACK_BOT_TOKEN }}
        with:
          channel-id: ${{ inputs.NOTIF_CHANNEL_ID }}
          payload: |
            {
              "attachments": [
                {
                  "mrkdwn_in": ["text"],
                  "color": "#A30002",
                  "author_name": "${{github.actor}}",
                  "author_link": "https://github.com/${{github.actor}}",
                  "author_icon": "https://github.com/${{github.actor}}.png",
                  "title": "Compilation dbt",
                  "title_link": "https://github.com/${{github.repository}}/actions/runs/${{github.run_id}}",
                  "text": "La compilation dbt a échoué"
                }
              ],
              "unfurl_links": false,
              "unfurl_media": false
            }
