{
	"info": {
		"_postman_id": "7e99452d-c97c-49a4-8a2b-107900b8f901",
		"name": "API Integration Tests",
		"description": "Collection of integration tests for the reco api.\nMade with Postman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20735314"
	},
	"item": [
		{
			"name": "/check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string OK\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"OK\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/check",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"check"
					]
				}
			},
			"response": []
		},
		{
			"name": "root",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Body matches string Welcome\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Welcome to the recommendation API!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/",
					"host": [
						"{{api_url}}"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/health/recommendable_offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be a JSON and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be a JSON with the right keys\", function () {",
							"  const jsonResponse = pm.response.json();",
							"  pm.expect(jsonResponse).to.be.an(\"object\");",
							"  pm.expect(jsonResponse).to.have.property('is_recommendable_offers_per_iris_shape_mv_datasource_exists')",
							"});",
							"",
							"",
							"pm.test(\"Response must be healthy\", function () {",
							"  const jsonResponse = pm.response.json();",
							"  pm.expect(jsonResponse.is_recommendable_offers_per_iris_shape_mv_datasource_exists).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/health/recommendable_offers",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"health",
						"recommendable_offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "/health/non_recommendable_offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is successful with a status code of 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response must be a JSON and have a body\", function () {",
							"     pm.response.to.be.ok;",
							"     pm.response.to.be.withBody;",
							"     pm.response.to.be.json;",
							"});",
							"",
							"pm.test(\"Response must be a JSON with the right keys\", function () {",
							"  const jsonResponse = pm.response.json();",
							"  pm.expect(jsonResponse).to.be.an(\"object\");",
							"  pm.expect(jsonResponse).to.have.property('is_non_recommendable_offers_datasource_exists')",
							"});",
							"",
							"",
							"pm.test(\"Response must be healthy\", function () {",
							"  const jsonResponse = pm.response.json();",
							"  pm.expect(jsonResponse.is_non_recommendable_offers_datasource_exists).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/health/non_recommendable_offers",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"health",
						"non_recommendable_offers"
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlis_recommendation/user_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is forbidden with a status code of 403\", function () {",
							"  pm.response.to.have.status(403);",
							"});",
							"",
							"pm.test(\"Body matches string Forbidden\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Forbidden\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlis_recommendation/user_id Geoloc with empyt body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"\r",
							"// TODO this for all calls\r",
							"pm.test(\"Response must contain an object params\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('params')\r",
							"  pm.expect(jsonResponse.params).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc free offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"priceMax\":0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc paid offers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"price_max\":0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc last 30 days",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var thirtyDaysBack = moment().subtract(30, 'days'); \r",
							"pm.globals.set(\"thirtyDaysBack\", thirtyDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc last 15 days THEATRE",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var FifteenDaysBack = moment().subtract(15, 'days'); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"beginningDatetime\": \"{{thirtyDaysBack}}\",\r\n    \"endingDatetime\": \"{{todayDate}}\",\r\n    \"categories\":[\"SPECTACLES\"],\r\n    \"subcategories\":[\"SPECTACLE_REPRESENTATION\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc last 15 days CINEMA",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var FifteenDaysBack = moment().subtract(15, 'days'); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"beginningDatetime\": \"{{thirtyDaysBack}}\",\r\n    \"endingDatetime\": \"{{todayDate}}\",\r\n    \"category\":[\"FILMS_SERIES_CINEMA\"]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc OfferTypeList: MOVIES",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var FifteenDaysBack = moment().subtract(15, 'days'); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offerTypeList\":[{\"MOVIE\":\"SCIENCE_FICTION\"},\r\n                     {\"MOVIE\":\"DETECTIVE\"},\r\n                     {\"MOVIE\":\"DRAMA\"}\r\n                     ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc OfferTypeList: BOOK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var FifteenDaysBack = moment().subtract(15, 'days'); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offerTypeList\":[{\"BOOK\":\"Manga\"},\r\n                    {\"BOOK\":\"Droit\"}\r\n                     ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc OfferTypeList: MUSIC",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var FifteenDaysBack = moment().subtract(15, 'days'); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offerTypeList\":[{\"BOOK\":\"Manga\"},\r\n                    {\"BOOK\":\"Droit\"}\r\n                     ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc OfferTypeList: SHOW",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment();\r",
							"var todayDate = today.format('YYYY-MM-DD'); \r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"var FifteenDaysBack = moment().subtract(15, 'days'); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack.format('YYYY-MM-DD'));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"offerTypeList\":[{\"SHOW\":\"Humour / Café-théâtre\"},\r\n                    {\"SHOW\":\"Théâtre\"}\r\n                     ]\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc Tonight is_event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const moment = require('moment'); \r",
							"const today = moment().utc();\r",
							"var todayDate = today.format('YYYYMMDDTHHMMSS'); \r",
							"\r",
							"var FifteenDaysBack = moment().utc().subtract(15, 'days').format('YYYYMMDDTHHMMSS');\r",
							"pm.globals.set(\"todayDate\", todayDate); \r",
							"pm.globals.set(\"FifteenDaysBack\", FifteenDaysBack);\r",
							"\r",
							"\r",
							"var current_timestamp18 = new Date();\r",
							"current_timestamp18.setUTCHours(18); \r",
							"current_timestamp18.setUTCMinutes(00); \r",
							"\r",
							"var current_timestamp24 = new Date();\r",
							"current_timestamp24.setUTCHours(23); \r",
							"current_timestamp24.setUTCMinutes(59); \r",
							"\r",
							"pm.globals.set(\"current_timestamp18\", current_timestamp18.toISOString())\r",
							"pm.globals.set(\"current_timestamp24\", current_timestamp24.toISOString())\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"isEvent\":true,\r\n    \"beginningDatetime\": \"{{current_timestamp18}}\",\r\n    \"end_date\": \"{{current_timestamp24}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc modelEndpoint : 'default_algo'",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results with reco_origin = algo\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"reco_origin\");\r",
							"  pm.expect(jsonResponse.params.reco_origin).equals(\"algo\")\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"modelEndpoint\":\"default_algo\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc modelEndpoint : 'cold_start'",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results with reco_origin = cold_start\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"reco_origin\");\r",
							"  pm.expect(jsonResponse.params.reco_origin).equals(\"cold_start\")\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"modelEndpoint\":\"cold_start\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc modelEndpoint : 'default_algo' , not digital",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results with reco_origin = algo\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"reco_origin\");\r",
							"  pm.expect(jsonResponse.params.reco_origin).equals(\"algo\")\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"modelEndpoint\":\"default_algo\",\r\n    \"isDigital\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id Geoloc modelEndpoint : 'cold_start' , not digital",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results with reco_origin = cold_start\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"reco_origin\");\r",
							"  pm.expect(jsonResponse.params.reco_origin).equals(\"cold_start\")\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"modelEndpoint\":\"cold_start\",\r\n    \"isDigital\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/playlist_recommendation/user_id categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array playlist_recommended_offers\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('playlist_recommended_offers')\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.playlist_recommended_offers.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().playlist_recommended_offers, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/playlist_recommendation/{{user_id}}?token={{api_token}}&categories=LIVRES&categories=FILMS_SERIES_CINEMA&categories=SPECTACLES",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"playlist_recommendation",
						"{{user_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key": "categories",
							"value": "LIVRES"
						},
						{
							"key": "categories",
							"value": "FILMS_SERIES_CINEMA"
						},
						{
							"key": "categories",
							"value": "SPECTACLES"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response must contain an array params with filtered = true\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('params')\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"filtered\");\r",
							"  pm.expect(jsonResponse.params.filtered).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}?token={{api_token}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key" : "modelEndpoint",
							"value" : "{{sim_offers_model_endpoint}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id geoloc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response must contain an array params with filtered = true\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('params')\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"filtered\");\r",
							"  pm.expect(jsonResponse.params.filtered).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}?token={{api_token}}&longitude=2.3688874&latitude=48.8632553",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key" : "modelEndpoint",
							"value" : "{{sim_offers_model_endpoint}}"
						},
						{
							"key": "longitude",
							"value": "2.3688874"
						},
						{
							"key": "latitude",
							"value": "48.8632553"
						}
						
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id no token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Request is forbidden with a status code of 403\", function () {\r",
							"  pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string Forbidden\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Forbidden\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "/similar_offers/offer_id categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Response time is less than 10s\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"pm.test(\"Response must be a JSON and have a body\", function () {\r",
							"     pm.response.to.be.ok;\r",
							"     pm.response.to.be.withBody;\r",
							"     pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"pm.test(\"Response must contain an array results\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('results')\r",
							"  pm.expect(jsonResponse.results).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response must at least 1 offer\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse.results.length).to.be.above(1);\r",
							"});\r",
							"\r",
							"function checkIfArrayIsUnique(array) {\r",
							"  return array.length === new Set(array).size;\r",
							"}\r",
							"\r",
							"pm.test('Check if Offer_ids are unique', () => {\r",
							"    let ids = []\r",
							"    _.each(pm.response.json().results, (item) => {\r",
							"        ids.push(item)\r",
							"    })\r",
							"\r",
							"    pm.expect(checkIfArrayIsUnique(ids), ids).to.be.true\r",
							"})\r",
							"\r",
							"\r",
							"pm.test(\"Response must contain an array params with filtered = true\", function () {\r",
							"  const jsonResponse = pm.response.json();\r",
							"  pm.expect(jsonResponse).to.be.an(\"object\");\r",
							"  pm.expect(jsonResponse).to.have.property('params')\r",
							"  pm.expect(jsonResponse.params).to.have.property(\"filtered\");\r",
							"  pm.expect(jsonResponse.params.filtered).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{api_url}}/similar_offers/{{offer_id}}?token={{api_token}}&categories=LIVRES&categories=FILMS_SERIES_CINEMA&categories=SPECTACLES",
					"host": [
						"{{api_url}}"
					],
					"path": [
						"similar_offers",
						"{{offer_id}}"
					],
					"query": [
						{
							"key": "token",
							"value": "{{api_token}}"
						},
						{
							"key" : "modelEndpoint",
							"value" : "{{sim_offers_model_endpoint}}"
						},
						{
							"key": "categories",
							"value": "LIVRES"
						},
						{
							"key": "categories",
							"value": "FILMS_SERIES_CINEMA"
						},
						{
							"key": "categories",
							"value": "SPECTACLES"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}