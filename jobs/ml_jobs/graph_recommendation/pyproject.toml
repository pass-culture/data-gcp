[project]
name = "graph-recommendation"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.11,<3.12"
dependencies = [
    "google-cloud-storage>=2.16.0",
    "ipykernel>=6.30.1",
    "matplotlib>=3.10.6",
    "pandas>=2.2.0",
    "pyarrow>=16.1.0",
    "pyg-lib==0.3.1", # We use old pyg-lib version to avoid `GLIBC_2.32' not found` error (see [here](https://github.com/rusty1s/pytorch_sparse/issues/377))
    "pytest>=8.2.2",
    "pyvis>=0.3.2",
    "ruff>=0.13.2",
    "scipy>=1.15.0",
    "streamlit>=1.35.0",
    "torch==2.1.2", # We use old torch version because of compatibility with pyg-lib
    "torch-geometric>=2.6.1",
    "tornado>=6.4.2",
    "typer>=0.12.3",
    "numpy<2.0.0", # To avoid issues with torch
    "loguru>=0.7.3",
]

[tool.uv.sources]
torch = [
  { index = "pytorch-cu121", marker = "sys_platform == 'linux'" },
  { index = "pytorch-cpu", marker = "sys_platform != 'linux'" },
]

pyg-lib = [
    { url = "https://data.pyg.org/whl/torch-2.1.0%2Bcu121/pyg_lib-0.3.1%2Bpt21cu121-cp311-cp311-linux_x86_64.whl", marker = "sys_platform == 'linux'" },
    { url = "https://data.pyg.org/whl/torch-2.1.0%2Bcpu/pyg_lib-0.3.1%2Bpt21-cp311-cp311-macosx_11_0_universal2.whl", marker = "sys_platform != 'linux'" },
]


[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

[[tool.uv.index]]
name = "pytorch-cu121"
url = "https://download.pytorch.org/whl/cu121"
explicit = true


## ruff
# Recommended ruff config for now, to be updated as we go along.
[tool.ruff]
target-version = 'py312'

lint.select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "I",      # isort
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "PT",     # flake8-pytest-style
    "RUF",    # Ruff-specific rules
    "FBT001", # flake8-boolean-trap
]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation
