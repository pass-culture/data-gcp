[project]
name = "offer-compliance"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = "~=3.10"
dependencies =  [
    "catboost>=1.2",
    "exceptiongroup>=1.2.1",
    "gcsfs>=2023.5.0",
    "gitdb>=4.0.11",
    "gitpython>=3.1.43",
    "google-cloud-aiplatform>=1.85.0",
    "google-cloud-secret-manager>=2.20.2",
    "loguru>=0.7.3",
    "mlflow>=2.20.1",
    "numpy>=1.26.4",
    "pandas-gbq>=0.17.1",
    "pandas>=1.5.3",
    "pyarrow>=16.1.0",
    "pytest>=8.2.2",
    "sentence-transformers>=2.7",
    "shap>=0.41.0",
    "streamlit>=1.35.0",
    "tornado>=6.4.2",
    "typer>=0.12.3",
]

[tool.ruff]
target-version = 'py310'

lint.select = [
    "E",      # pycodestyle
    "W",      # pycodestyle
    "F",      # Pyflakes
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "I",      # isort
    "SIM",    # flake8-simplify
    "TCH",    # flake8-type-checking
    "TID",    # flake8-tidy-imports
    "UP",     # pyupgrade
    "PT",     # flake8-pytest-style
    "RUF",    # Ruff-specific rules
    "FBT001", # flake8-boolean-trap
]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation
