[project]
name = "retrieval-vector"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "docarray>=0.21.0",
    "flask>=3.0.0",
    "flask-cors>=4.0.0",
    "hnne>=0.1.10",
    "hypercorn>=0.15.0",
    "lancedb>=0.13.0",
    "loguru>=0.6.0",
    "numpy>=1.26.4",
    "pandas>=2.1.1",
    "pyarrow>=13.0.0",
    "python-jose>=3.4.0",
    "python-json-logger>=2.0.7",
    "sentence-transformers>=2.2.2",
    "torch>=2.6.0",
    "torchvision>=0.21.0",
    "google-cloud-storage>=2.0.0"
]


[dependency-groups]
dev = [
    "flask-testing>=0.8.1",
    "gcsfs>=2023.5.0",
    "google-cloud-aiplatform>=1.22.0",
    "google-cloud-bigquery[pandas]>=3.25.0",
    "google-cloud-secret-manager>=2.4.0",
    "keras>=2.14",
    "mlflow>=2.20.1",
    "numpy>=1.26.4",
    "polars>=0.18.6",
    "protobuf>=3.9.2",
    "pytest>=7.3.0",
    "pytest-cov>=5.0.0",
    "pytest-mock>=3.6.1",
    "tensorflow>=2.14.0",
    "torch>=2.6.0",
    "tqdm>=4.64.1",
    "typer>=0.7.0",
    "unittest2>=1.1.0",
]

## uv
[tool.uv.sources]
torch = [
  { index = "pytorch-cpu" },
]
torchvision = [
  { index = "pytorch-cpu" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

## ruff
# Recommended ruff config for now, to be updated as we go along.
[tool.ruff]
target-version = 'py310'

lint.select = ["E4", "E7", "E9", "F", "I"]
# TARGET : lint.select = [
#     "E",      # pycodestyle
#     "W",      # pycodestyle
#     "F",      # Pyflakes
#     "B",      # flake8-bugbear
#     "C4",     # flake8-comprehensions
#     "I",      # isort
#     "SIM",    # flake8-simplify
#     "TCH",    # flake8-type-checking
#     "TID",    # flake8-tidy-imports
#     "UP",     # pyupgrade
#     "PT",     # flake8-pytest-style
#     "RUF",    # Ruff-specific rules
#     "FBT001", # flake8-boolean-trap
# ]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]

# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation
