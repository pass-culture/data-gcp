[project]
name = "retrieval-vector"
version = "0.1.0"
description = "Debug"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "aiohappyeyeballs==2.6.1",
    "aiohttp==3.10.6",
    "aiosignal==1.3.2",
    "annotated-types==0.7.0",
    "async-timeout==4.0.3",
    "attrs==25.3.0",
    "blinker==1.9.0",
    "cachetools==5.5.0",
    "certifi==2025.6.15",
    "charset-normalizer==3.4.2",
    "click==8.2.1",
    "cython==3.1.2",
    "decorator==5.2.1",
    "deprecation==2.1.0",
    "docarray==0.41.0",
    "docker==7.1.0",
    "ecdsa==0.19.1",
    "exceptiongroup==1.3.0",
    "filelock==3.18.0",
    "flask-cors==6.0.1",
    "flask==3.0.0",
    "frozenlist==1.7.0",
    "fsspec==2025.5.1",
    "h11==0.16.0",
    "h2==4.1.0",
    "hnne==1.0.2",
    "hpack==4.1.0",
    "huggingface-hub==0.33.0",
    "hypercorn==0.17.3",
    "hyperframe==6.1.0",
    "idna==3.10",
    "importlib-metadata==8.7.0",
    "itsdangerous==2.2.0",
    "jina-hubble-sdk==0.39.0",
    "jinja2==3.1.6",
    "joblib==1.5.1",
    "lancedb==0.13.0",
    "llvmlite==0.43.0",
    "loguru==0.7.3",
    "markdown-it-py==3.0.0",
    "markupsafe==3.0.2",
    "mdurl==0.1.2",
    "mpmath==1.3.0",
    "multidict==6.5.0",
    "networkx==3.4.2",
    "nltk==3.9.1",
    "numba==0.60.0",
    "numpy==1.26.4",
    "overrides==7.7.0",
    "packaging==24.1",
    "pandas==2.3.0",
    "pathspec==0.12.1",
    "pillow==11.2.1",
    "priority==2.0.0",
    "py==1.11.0",
    "pyarrow==13.0.0",
    "pyasn1==0.4.8",
    "pydantic-core==2.23.4",
    "pydantic==2.9.2",
    "pygments==2.19.1",
    "pylance==0.17.0",
    "pynndescent==0.5.13",
    "python-dateutil==2.9.0.post0",
    "python-jose==3.4.0",
    "python-json-logger==2.0.7",
    "pytz==2025.2",
    "pyyaml==6.0.2",
    "regex==2024.11.6",
    "requests==2.32.4",
    "retry==0.9.2",
    "rich==14.0.0",
    "rsa==4.9.1",
    "safetensors==0.5.3",
    "scikit-learn==1.7.0",
    "scipy==1.15.3",
    "sentence-transformers==2.2.2",
    "sentencepiece==0.2.0",
    "shellingham==1.5.4",
    "six==1.17.0",
    "sympy==1.13.1",
    "taskgroup==0.0.0a4",
    "threadpoolctl==3.6.0",
    "tokenizers==0.19.1",
    "tomli==2.2.1",
    "torch==2.6.0",
    "torchvision==0.21.0",
    "tqdm==4.67.1",
    "transformers==4.44.2",
    "typer==0.16.0",
    "typing-extensions==4.14.0",
    "tzdata==2025.2",
    "urllib3==2.4.0",
    "werkzeug==3.1.3",
    "wsproto==1.2.0",
    "yarl==1.20.1",
    "zipp==3.23.0",
]

[tool.uv]
dev-dependencies = [
    "flask-testing==0.8.1",
    "gcsfs>=2023.5.0",
    "google-cloud-aiplatform>=1.22.0",
    "google-cloud-bigquery[pandas]>=3.25.0",
    "google-cloud-secret-manager==2.4.0",
    "keras==2.14",
    "mlflow==2.20.1",
    "numpy==1.26.4",
    "pandas>=1.5.3",
    "polars==0.18.6",
    "protobuf>=3.9.2",
    "pytest-cov==5.0.0",
    "pytest-mock==3.6.1",
    "pytest==7.3.0",
    "python-jose==3.4.0",
    "python-json-logger==2.0.7",
    "sentence-transformers==2.2.2",
    "tensorflow==2.14.0",
    "unittest2==1.1.0",
]

## uv
[tool.uv.sources]
torch = [
  { index = "pytorch-cpu" },
]
torchvision = [
  { index = "pytorch-cpu" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

## ruff
# Recommended ruff config for now, to be updated as we go along.
[tool.ruff]
target-version = 'py310'

lint.select = ["E4", "E7", "E9", "F", "I"]
# TARGET : lint.select = [
#     "E",      # pycodestyle
#     "W",      # pycodestyle
#     "F",      # Pyflakes
#     "B",      # flake8-bugbear
#     "C4",     # flake8-comprehensions
#     "I",      # isort
#     "SIM",    # flake8-simplify
#     "TCH",    # flake8-type-checking
#     "TID",    # flake8-tidy-imports
#     "UP",     # pyupgrade
#     "PT",     # flake8-pytest-style
#     "RUF",    # Ruff-specific rules
#     "FBT001", # flake8-boolean-trap
# ]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation
