name: "data_gcp_dbt"
version: "1.0.0"
config-version: 2

flags:
  send_anonymous_usage_stats: False
  require_explicit_package_overrides_for_builtin_materializations: False
  state_modified_compare_more_unrendered_values: True
  require_model_names_without_spaces: True
  source_freshness_run_project_hooks: False
  restrict_direct_pg_catalog_access: False
  require_yaml_configuration_for_mf_time_spines: False
  require_batched_execution_for_custom_microbatch_strategy: False
  require_nested_cumulative_type_params: False
  validate_macro_args: False

# This setting configures which "profile" dbt uses for this project.
profile: "data_gcp_dbt"

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

# If you wish to write dbt artifacts to a custom directory, please use the --target-path CLI flag or DBT_TARGET_PATH env var instead.
packages-install-path: "{{ env_var('DBT_TARGET_PATH' ~ '/dbt_packages', 'target/dbt_packages') }}"
# directories to be removed by `dbt clean`
clean-targets:
  - "{{ env_var('DBT_TARGET_PATH', 'target') }}"

models:
  data_gcp_dbt:
    +pre-hook:
      - "{{ create_schema_dev() }}"
    +hours_to_expiration: "{{ var('hours_to_expiration','48') if target.name=='local' else none }}"
    +labels:
      schedule: "daily"
    +persist_docs:
      relation: True
      columns: True
    raw:
      +meta:
        owner: "@data-engineering"
      +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      +schema: raw_applicative_{{ target.name }}
      applicative:
        +tags: "exclude_ci"
    clean:
      +meta:
        owner: "@data-engineering"
      +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      +schema: clean_{{ target.name }}
      +docs:
        node_color: "#b43ddb"
        show: false
      applicative:
        +alias: applicative_database_
        +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
    analytics:
      +meta:
        owner: "@analytics"
      +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      +schema: analytics_{{ target.name }}
      +docs:
        node_color: "#d90000"
        show: false
    intermediate:
      +meta:
        owner: "@data-engineering"
      +materialized: "{{ var('CI_MATERIALIZATION', 'view') }}"
      global:
        +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      raw:
        +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
    mart:
      +meta:
        owner: "@analytics"
      +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      +schema: analytics_{{ target.name }}
      monitoring:
        +meta:
          owner: "@data-engineering"
      external_reporting:
        +tags: "monthly"
        +labels:
          schedule: "monthly"
        +meta:
          owner: "@data-engineering"
        individual:
          ephemerals_kpis:
            +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
    export:
      +schema: export_{{ target.name }}
      +materialized: "{{ var('CI_MATERIALIZATION', 'view') }}"
      +meta:
        owner: "@data-engineering"
      backend:
        +schema: backend_{{ target.name }}
        +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      ministry:
        +tags: "monthly"
        +labels:
          schedule: "monthly"
    machine_learning:
      +materialized: "{{ var('CI_MATERIALIZATION', 'table') }}"
      +meta:
        owner: "@data-science"

  elementary:
    +on_schema_change: "append_new_columns"
    +enabled: true
    +schema: dbt_artifacts_{{ target.name }}
    +docs:
      show: false

seeds:
  +schema: seeds
  +docs:
    node_color: "#000000"

snapshots:
  +target_schema: snapshot_{{ target.name }}
  +docs:
    show: False

data_tests:
  +store_failures: False # Storing results can be expensive on large tables.
  +severity: "{{ env_var('CI_SEVERITY', 'warn') }}" # Failing tests will generate a warning by default. To raise an error, overwrite a config with severity: error.
  +docs:
    show: True
    tags: "test"
  data_gcp_dbt:
    export:
      +severity: "{{ 'error' if target.name in ['prod', 'stg'] else 'warn' }}"

vars:
  ENV_SHORT_NAME: dev
  pass_start_date: "2018-01-01"
  CI_MATERIALIZATION: none
  region_name: region-europe-west1
  mute_ensure_materialization_override: True
  snapshot_filter: "dbt_valid_to is null"
  full_refresh_lookback: "1 year"
  not_null_anomaly_threshold_alert_percentage: 1
  test_severity:
    dev: warn
    stg: warn
