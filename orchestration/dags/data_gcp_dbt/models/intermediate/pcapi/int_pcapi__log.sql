SELECT
    DATE(timestamp) AS partition_date,
    jsonPayload.extra.path AS url_path,
    timestamp AS log_timestamp,
    resource.labels.namespace_name AS environement,
    jsonPayload.message,
    jsonPayload.technical_message_id,
    jsonPayload.extra.source,
    jsonPayload.extra.analyticsSource AS analytics_source,
    CAST(jsonPayload.user_id AS INT64) AS user_id,
    jsonPayload.extra.userid AS extra_user_id,
    jsonPayload.extra.uai,
    jsonPayload.extra.user_role,
    jsonPayload.extra.from AS origin,
    CAST(jsonPayload.extra.stockId AS string) AS collective_stock_id,
    CAST(jsonPayload.extra.offerId AS string) AS offer_id,
    CAST(jsonPayload.extra.collective_offer_template_id AS string) AS collective_offer_template_id,
    CAST(jsonPayload.extra.queryid AS string) AS query_id,
    jsonPayload.extra.comment,
    jsonPayload.extra.requested_date,
    CAST(jsonPayload.extra.total_students AS int) AS total_students,
    CAST(jsonPayload.extra.total_teachers AS int) AS total_teachers,
    jsonPayload.extra.header_link_name,
    CAST(coalesce(jsonPayload.extra.bookingId, jsonPayload.extra.booking_id) AS string) AS booking_id,
    CAST(jsonPayload.extra.resultscount AS int) AS results_count,
    CAST(jsonPayload.extra.resultnumber AS int) AS results_number,
    jsonPayload.extra.filtervalues.eventaddresstype AS address_type_filter,
    CAST(jsonPayload.extra.filtervalues.query AS string) AS text_filter,
    CAST(jsonPayload.extra.statuscode as INT64) as status_code,
    jsonPayload.extra.deviceid as device_id,
    jsonPayload.extra.sourceip as source_ip,
    jsonPayload.extra.appversion as app_version,
    jsonPayload.extra.platform,
    ARRAY_TO_STRING(jsonPayload.extra.filtervalues.departments, ',') AS department_filter,
    ARRAY_TO_STRING(jsonPayload.extra.filtervalues.academies, ',') AS academy_filter,
    ARRAY_TO_STRING(ARRAY(SELECT CAST(value AS STRING) FROM UNNEST(jsonPayload.extra.filtervalues.venue) AS value), ',') AS venue_filter,
    ARRAY_TO_STRING(ARRAY(SELECT CAST(value AS STRING) FROM UNNEST(jsonPayload.extra.filtervalues.domains) AS value), ',') AS artistic_domain_filter,
    ARRAY_TO_STRING(ARRAY(SELECT CAST(value AS STRING) FROM UNNEST(jsonPayload.extra.filtervalues.students) AS value), ',') AS student_filter,
    ARRAY_TO_STRING(jsonPayload.extra.filtervalues.formats, ',') AS format_filter,
    jsonPayload.extra.suggestiontype AS suggestion_type,
    jsonPayload.extra.suggestionvalue AS suggestion_value,
    CAST(jsonPayload.extra.isfavorite AS boolean) AS is_favorite,
    CAST(jsonPayload.extra.playlistid AS STRING) AS playlist_id,
    CAST(jsonPayload.extra.domainid AS STRING) AS domain_id,
    CAST(jsonPayload.extra.venueid AS STRING) AS venue_id,
    CAST(jsonPayload.extra.index AS INT) AS rank_clicked,
    trace
FROM {{ source("raw","stdout") }}
