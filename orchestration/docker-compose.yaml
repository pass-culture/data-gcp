volumes:
  postgres-db-volume:


x-airflow-common: &airflow-common
  environment: &airflow-common-env
    LOCAL_ENV: ${LOCAL_ENV:-1}
    GOOGLE_APPLICATION_CREDENTIALS: ${GOOGLE_APPLICATION_CREDENTIALS:-}
    GOOGLE_CLOUD_PROJECT: ${GOOGLE_CLOUD_PROJECT:-}
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY:-}
    AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT: ${AIRFLOW_CONN_GOOGLE_CLOUD_DEFAULT:-}
    AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW__WEBSERVER__SECRET_KEY:-}
    ENV_SHORT_NAME: ${ENV_SHORT_NAME:-}
    GCE_SA: ${GCE_SA:-}
  volumes:
    - ./dags:/opt/airflow/dags
    - ./airflow/config/airflow.cfg:/opt/airflow/airflow.cfg
    - ./airflow/logs:/opt/airflow/logs
    - ./dags/data_gcp_dbt:/opt/airflow/data_gcp_dbt
  user: root
  depends_on:
    - postgres

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow" ]
      interval: 5s
      retries: 5
    restart: "unless-stopped"

  airflow-webserver:
    image: airflow-custom-image:latest
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://airflow-webserver:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: "unless-stopped"
    depends_on:
      - airflow-init

  airflow-scheduler:
    image: airflow-custom-image:latest
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "http://airflow-webserver:8080"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: "unless-stopped"
    depends_on:
      - airflow-init

  airflow-init:
    build:
      context: .
      dockerfile: ${DOCKERFILE_PATH:-airflow/Dockerfile}
    <<: *airflow-common
    command: "airflow db init"
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _AIRFLOW_WWW_USER_EMAIL: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}admin@example.com
    restart: "no"
    image: airflow-custom-image:latest
    depends_on:
      postgres:
        condition: service_healthy
