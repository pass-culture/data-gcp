[project]
name = "retrieval-vector"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "docarray==0.21.0",
    "h11==0.14.0",
    "h2==4.1.0",
    "hnne==0.1.10",
    "huggingface-hub==0.34.4",
    "hypercorn==0.15.0",
    "markupsafe==2.1.5",
    "nltk==3.9.1",
    "numpy==1.26.4",
    "packaging==24.1",
    "pandas==2.1.1",
    "pathspec==0.12.1",
    "pillow==10.4.0",
    "priority==2.0.0",
    "py==1.11.0",
    "pyarrow==21.0.0",
    "pyasn1==0.4.8",
    "pydantic==2.11.7",
    "pygments==2.18.0",
    "pylance==0.35.0",
    "pynndescent==0.5.13",
    "python-dateutil==2.9.0.post0",
    "python-jose==3.4.0",
    "python-json-logger==2.0.7",
    "pytz==2024.2",
    "pyyaml==6.0.2",
    "regex==2024.9.11",
    "requests==2.32.3",
    "safetensors==0.4.5",
    "scikit-learn==1.5.2",
    "scipy==1.13.1",
    "torch==2.6.0",
    "torchvision==0.21.0",
    "tqdm==4.66.5",
    "transformers==4.44.2",
    "typer==0.12.5",
    "streamlit==1.49.0",
    "openai==1.106.1",
    "pydantic-ai==1.0.1",
    "lancedb==0.25.0",
    "sentence-transformers==5.1.0",
    "loguru==0.7.3",
    "google-cloud-secret-manager>=2.16.2",
    "langchain>=0.0.208"

]

## uv
[tool.uv.sources]
torch = [
  { index = "pytorch-cpu" },
]
torchvision = [
  { index = "pytorch-cpu" },
]

[[tool.uv.index]]
name = "pytorch-cpu"
url = "https://download.pytorch.org/whl/cpu"
explicit = true

## ruff
# Recommended ruff config for now, to be updated as we go along.
[tool.ruff]
target-version = 'py310'

lint.select = ["E4", "E7", "E9", "F", "I"]
# TARGET : lint.select = [
#     "E",      # pycodestyle
#     "W",      # pycodestyle
#     "F",      # Pyflakes
#     "B",      # flake8-bugbear
#     "C4",     # flake8-comprehensions
#     "I",      # isort
#     "SIM",    # flake8-simplify
#     "TCH",    # flake8-type-checking
#     "TID",    # flake8-tidy-imports
#     "UP",     # pyupgrade
#     "PT",     # flake8-pytest-style
#     "RUF",    # Ruff-specific rules
#     "FBT001", # flake8-boolean-trap
# ]

[tool.ruff.lint.pydocstyle]
# Automatically disable rules that are incompatible with Google docstring convention
convention = "google"

[tool.ruff.lint.pycodestyle]
max-doc-length = 100

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-type-checking]
strict = true
runtime-evaluated-base-classes = ["pydantic.BaseModel"]
# Pydantic needs to be able to evaluate types at runtime
# see https://pypi.org/project/flake8-type-checking/ for flake8-type-checking documentation
# see https://beta.ruff.rs/docs/settings/#flake8-type-checking-runtime-evaluated-base-classes for ruff documentation
